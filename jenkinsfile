node {
        def gitRepo = 'https://github.com/kmadhukiran/terraform_azure_project.git'
        currentBuild.result = "SUCCESS"

    try {
         stage('Init parameters'){
            withCredentials([azureServicePrincipal(credentialsId: 'Azure_credentials',
                                    subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
                                    clientIdVariable: 'ARM_CLIENT_ID',
                                    clientSecretVariable: 'ARM_CLIENT_SECRET',
                                    tenantIdVariable: 'ARM_TENANT_ID')]){
            sh '$CLIENT_ID'
                                    }
         }
    
        stage('Terraform init'){
            withCredentials([azureServicePrincipal(credentialsId: 'Azure_credentials',
                                    subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
                                    clientIdVariable: 'ARM_CLIENT_ID',
                                    clientSecretVariable: 'ARM_CLIENT_SECRET',
                                    tenantIdVariable: 'ARM_TENANT_ID')]) {
        //sh 'az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID'
                          sh label: '', script: 'terraform init '
                          sh label: '', script: 'terraform 0.12upgrade --auto-approve'
                          sh label: '', script: 'terraform validate'
            }
        }
        stage('Terraform plan'){
            withCredentials([azureServicePrincipal(credentialsId: 'Azure_credentials',
                                    subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
                                    clientIdVariable: 'ARM_CLIENT_ID',
                                    clientSecretVariable: 'ARM_CLIENT_SECRET',
                                    tenantIdVariable: 'ARM_TENANT_ID')]) {
                    sh label: '', script: 'terraform plan -input=false'
            }
        }        
       
        stage('Terraform apply'){
            withCredentials([azureServicePrincipal(credentialsId: 'Azure_credentials',
                                    subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
                                    clientIdVariable: 'ARM_CLIENT_ID',
                                    clientSecretVariable: 'ARM_CLIENT_SECRET',
                                    tenantIdVariable: 'ARM_TENANT_ID')]) {
                sh  """  
                    terraform apply -input=false -auto-approve "tfplan"
                   """
            }
        }
        stage('Upload tfstate'){
            container('terraform-az') {
                // Upload the state of the plan to Azure Blob Storage
                sh (script: "cd terraform-plans/create-vmss-from-image && tar -czvf ~/workspace/${env.JOB_NAME}/$deployment'.tar.gz' .")
                sh "pwd"
                azureUpload blobProperties: [cacheControl: '', contentEncoding: '', contentLanguage: '', contentType: '', detectContentType: true], containerName: '<container-name>', fileShareName: '', filesPath: '${deployment}.tar.gz', storageCredentialId: '<jenkins-storage-id>', storageType: 'blobstorage'
                
            }
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    }
